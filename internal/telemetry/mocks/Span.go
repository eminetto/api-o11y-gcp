// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	attribute "go.opentelemetry.io/otel/attribute"
	codes "go.opentelemetry.io/otel/codes"

	mock "github.com/stretchr/testify/mock"

	trace "go.opentelemetry.io/otel/trace"
)

// Span is an autogenerated mock type for the Span type
type Span struct {
	mock.Mock
}

// AddEvent provides a mock function with given fields: name, options
func (_m *Span) AddEvent(name string, options ...trace.EventOption) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// End provides a mock function with given fields: options
func (_m *Span) End(options ...trace.SpanEndOption) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// IsRecording provides a mock function with given fields:
func (_m *Span) IsRecording() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRecording")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RecordError provides a mock function with given fields: err, options
func (_m *Span) RecordError(err error, options ...trace.EventOption) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, err)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// SetAttributes provides a mock function with given fields: kv
func (_m *Span) SetAttributes(kv ...attribute.KeyValue) {
	_va := make([]interface{}, len(kv))
	for _i := range kv {
		_va[_i] = kv[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// SetName provides a mock function with given fields: name
func (_m *Span) SetName(name string) {
	_m.Called(name)
}

// SetStatus provides a mock function with given fields: code, description
func (_m *Span) SetStatus(code codes.Code, description string) {
	_m.Called(code, description)
}

// SpanContext provides a mock function with given fields:
func (_m *Span) SpanContext() trace.SpanContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SpanContext")
	}

	var r0 trace.SpanContext
	if rf, ok := ret.Get(0).(func() trace.SpanContext); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(trace.SpanContext)
	}

	return r0
}

// TracerProvider provides a mock function with given fields:
func (_m *Span) TracerProvider() trace.TracerProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TracerProvider")
	}

	var r0 trace.TracerProvider
	if rf, ok := ret.Get(0).(func() trace.TracerProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.TracerProvider)
		}
	}

	return r0
}

// span provides a mock function with given fields:
func (_m *Span) span() {
	_m.Called()
}

// NewSpan creates a new instance of Span. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSpan(t interface {
	mock.TestingT
	Cleanup(func())
}) *Span {
	mock := &Span{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
